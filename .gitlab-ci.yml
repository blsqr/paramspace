# paramspace GitLab CI/CD, based on tox and pytest
---
image: python

stages:
  - check
  - test
  - test_minimal_deps
  - build
  - deploy

before_script:
  - pip install tox

# Some shared default configuration that cannot be set on root level
.defaults: &defaults
  tags:
    - default

# Checks ----------------------------------------------------------------------

check:hooks:
  <<: *defaults
  stage: check
  allow_failure: true
  before_script:
    - pip install pre-commit
  script:
    - pre-commit run --all-files --verbose --show-diff-on-failure


# Tests -----------------------------------------------------------------------

test:py36: &test
  <<: *defaults
  image: python:3.6
  stage: test
  script:
    - tox -e py36

test:py37:
  <<: *test
  image: python:3.7
  script:
    - tox -e py37

test:py38:
  <<: *test
  image: python:3.8
  script:
    - tox -e py38

# Test again using the lower bound of the python dependencies .................

test_minimal_deps:py36: &minimal
  <<: *defaults
  image: python:3.6
  stage: test_minimal_deps
  allow_failure: true
  needs:
    - test:py36
  script:
    - tox -e py36-minimal_deps

test_minimal_deps:py37:
  <<: *minimal
  image: python:3.7
  needs:
    - test:py37
  script:
    - tox -e py37-minimal_deps

test_minimal_deps:py38:
  <<: *minimal
  image: python:3.8
  needs:
    - test:py38
  script:
    - tox -e py38-minimal_deps


# Build -----------------------------------------------------------------------

build:docs:
  <<: *defaults
  stage: build
  needs:
    - check:hooks
  allow_failure: true
  before_script:
    - pip install -e .[doc]
  script:
    - cd doc
    - make doc
  after_script:
    - cat doc/build_errors.log
  artifacts:
    when: always
    name: "doc-$CI_COMMIT_REF_NAME"
    expire_in: 1w
    expose_as: documentation build results and error log
    paths:
      - doc/_build/html
      - doc/build_errors.log


# Deployment ------------------------------------------------------------------

# PyPI Deployment. Triggered manually or when a new tag is added.
deploy:pypi:
  <<: *defaults
  image: python:3.6
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
  variables:
    # If true, there will only be a push to the PyPI _test_ repository
    TEST_DEPLOY_ONLY: false
  before_script:
    - pip install -U twine setuptools
  script:
    # Define a regex for matching the tag name.
    # Ensures fully-qualified version specifiers:
    #   Allowed:     v1.2.3 or v1.2.3a4
    #   Not allowed: 1.2.3 (missing v) or v1.0 (missing patch version)
    # More info:     https://regex101.com/r/AsCCJo/2
    - export VERSION_PATTERN="v([[:digit:]]+)\.([[:digit:]]+)\.([[:digit:]]+)([[:lower:]]\d+)?"
    # Before checking that the tag matches the expected pattern, check the
    # regex pattern itself with a few allowed and disallowed versions.
    - "! [[ \"v1\" =~ ${VERSION_PATTERN} ]]"
    - "! [[ \"1.2\" =~ ${VERSION_PATTERN} ]]"
    - "! [[ \"v1.2\" =~ ${VERSION_PATTERN} ]]"
    - "[[ \"v1.2.3\" =~ ${VERSION_PATTERN} ]]"
    - "[[ \"v1.23.4a5\" =~ ${VERSION_PATTERN} ]]"

    # Now do the actual check
    - "[[ ${CI_COMMIT_TAG} =~ ${VERSION_PATTERN} ]]"
    # Tag is of the correct form, yay!

    # Create distribution files
    - python setup.py sdist bdist_wheel

    # Make sure the Python version is the same as the tag
    - 'cat paramspace.egg-info/PKG-INFO | grep "^Version: ${CI_COMMIT_TAG}$"'

    # Upload to the TEST PyPI index (using separate credentials)
    - twine upload --repository-url https://test.pypi.org/legacy/ -u ${PYPI_TEST_USER} -p ${PYPI_TEST_PASSWORD} dist/*

    # Exit here if only a test deployment was to be carried out
    - if [ "${TEST_DEPLOY_ONLY}" = true ]; then exit 0; fi

    # If this worked, continue and upload to actual package index
    - twine upload -u ${PYPI_USER} -p ${PYPI_PASSWORD} dist/*

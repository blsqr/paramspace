# paramspace GitLab CI/CD, based on tox and pytest
---
image: python

stages:
  - check
  - test
  - test_minimal_deps
  - build
  - deploy

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

before_script:
  - pip install tox

# Some shared default configuration that cannot be set on root level
.defaults: &defaults {}

# Checks ----------------------------------------------------------------------

check:noop:  # This is a no-op job, used as `needs` for all later jobs
  <<: *defaults
  stage: check
  image: alpine:latest
  cache: {}
  variables:
    GIT_STRATEGY: none
  before_script: []
  script:
    - echo "Let's get testing!"
    - echo "(This is a workaround for 'https://gitlab.com/gitlab-org/gitlab/issues/30631')"

check:hooks:
  <<: *defaults
  stage: check
  allow_failure: true
  before_script:
    - pip install pre-commit
  script:
    - pre-commit run --all-files --verbose --show-diff-on-failure


# Tests -----------------------------------------------------------------------

test:py36: &test
  <<: *defaults
  image: python:3.6
  stage: test
  needs: ["check:noop"]
  script:
    - tox -e py36

test:py37:
  <<: *test
  image: python:3.7
  script:
    - tox -e py37

test:py38:
  <<: *test
  image: python:3.8
  script:
    - tox -e py38


# Test again using the lower bound of the python dependencies .................
# These are only carried out when:
#   - The branch name starts with `prepare-release`
#   - The MR title contains "prepare release" (not case-sensitive)

test_minimal_deps:py36: &minimal
  <<: *defaults
  image: python:3.6
  stage: test_minimal_deps
  rules:
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^prepare-release/'
    - if: '$CI_MERGE_REQUEST_TITLE =~ /.*prepare release.*/i'
    - if: '$CI_COMMIT_REF_NAME =~ /^master$/'
    - if: '$CI_COMMIT_TAG'
  allow_failure: true
  needs: ["test:py36"]
  script:
    - tox -e py36-minimal_deps

test_minimal_deps:py37:
  <<: *minimal
  image: python:3.7
  needs: ["test:py37"]
  script:
    - tox -e py37-minimal_deps

test_minimal_deps:py38:
  <<: *minimal
  image: python:3.8
  needs: ["test:py38"]
  script:
    - tox -e py38-minimal_deps


# Build -----------------------------------------------------------------------

build:docs:
  <<: *defaults
  stage: build
  needs: ["check:noop"]
  allow_failure: true
  before_script:
    - pip install -e .[doc]
  script:
    - cd doc
    - make doc
  after_script:
    - cat doc/build_errors.log
  artifacts:
    when: always
    name: "doc-$CI_COMMIT_REF_NAME"
    expire_in: 1w
    expose_as: documentation build results and error log
    paths:
      - doc/_build/html
      - doc/build_errors.log


# Deployment ------------------------------------------------------------------

# PyPI Deployment. Triggered manually or when a new tag is added.
# NOTE:
#   - If tag-created, this job still needs to be _started_ manually
#   - If web-created, this job will only deploy to the PyPI staging server
#     and never exit successfully.
deploy:pypi:
  <<: *defaults
  image: python:3.8
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG'
      when: manual
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
      allow_failure: true
  before_script:
    - pip install -U twine setuptools
  script:
    # Define a regex for matching the tag name.
    # Ensures fully-qualified version specifiers:
    #   Allowed:     v1.2.3 or v1.2.3a4
    #   Not allowed: 1.2.3 (missing v) or v1.0 (missing patch version)
    # More info:     https://regex101.com/r/AsCCJo/2
    - export VERSION_PATTERN="v([[:digit:]]+)\.([[:digit:]]+)\.([[:digit:]]+)([[:lower:]]\d+)?"
    # Before checking that the tag matches the expected pattern, check the
    # regex pattern itself with a few allowed and disallowed versions.
    - "! [[ \"v1\" =~ ${VERSION_PATTERN} ]]"
    - "! [[ \"1.2\" =~ ${VERSION_PATTERN} ]]"
    - "! [[ \"v1.2\" =~ ${VERSION_PATTERN} ]]"
    - "[[ \"v1.2.3\" =~ ${VERSION_PATTERN} ]]"
    - "[[ \"v1.23.4a5\" =~ ${VERSION_PATTERN} ]]"

    # Now do the actual check
    - 'echo "Current commit tag: \"${CI_COMMIT_TAG}\""'
    - "   [ -n \"${CI_COMMIT_TAG}\" ] \
       && [[ ${CI_COMMIT_TAG} =~ ${VERSION_PATTERN} ]]"
    # Tag is of the correct form, yay!

    # Create distribution files
    - python setup.py sdist bdist_wheel

    # Make sure the package version is the same as the tag, if a tag was given.
    - 'if [ -n "${CI_COMMIT_TAG}" ]               \
      ; then cat paramspace.egg-info/PKG-INFO     \
          | grep "^Version: ${CI_COMMIT_TAG:1}$"  \
      ; else echo "Got no commit tag!"            \
      ; fi'

    # Upload to the TEST PyPI index (using separate credentials)
    - twine upload --repository testpypi -u ${PYPI_TEST_USER} -p ${PYPI_TEST_PASSWORD} dist/*

    # Exit here if there is no commit tag; every actual release should also
    # have a commit tag set, so there's no point in continuing otherwise.
    - if [ -z "${CI_COMMIT_TAG}" ]; then echo "Exiting now ..." && exit 1; fi

    # If all of the above passed, continue and upload to actual package index
    - twine upload -u ${PYPI_USER} -p ${PYPI_PASSWORD} dist/*

    # ... and check that it downloads as desired
    - sleep 60
    - pip install paramspace==${CI_COMMIT_TAG:1}
